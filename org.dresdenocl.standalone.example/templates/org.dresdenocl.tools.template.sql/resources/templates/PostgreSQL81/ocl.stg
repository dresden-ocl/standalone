group postgre;
delimiters "$","$"

// --- ATTRIBUTE ACCESS (CLASS AND ATTRIBUTE) --- 
feature_call_attribute_boolean(attribute) ::= <<
($attribute$ = true)
>>


// ---  BOOLEAN (BASIC TYPE) --- 
literal_boolean_true() ::= <<
(true)
>>

literal_boolean_false() ::= <<
(false)
>>


// ---  COLLECTIONS - SET (QUERY) --- 
literal_collection_set(items) ::= <<
$items:literal_collection_set_item(); separator=", "$
>>

literal_collection_set_item(item) ::= <<
$item$
>>

// -- ITERATOR FORALL (QUERY) ---
feature_call_forall(source,alias,select,object2,from,expression) ::= <<
NOT EXISTS (
  SELECT $select$ FROM $from$ AS foo
  WHERE $object2$ IN (
    SELECT $object2$ FROM $source$ AS $alias$
    WHERE NOT $expression$
  )
)
>>

feature_call_exists(source,select,from,expression) ::= <<
NOT EXISTS (
  SELECT $select$ FROM $from$ AS foo
  WHERE $selectt$ IN (
    SELECT $select$ FROM $source$
    WHERE NOT $expression$
  )
)
>>

feature_call_excluding_sequence(collection,select,element) ::= <<
SELECT $select$,
  (SELECT COUNT(*)+1 FROM (
    SELECT $select$, SEQNO
    FROM $collection$
    WHERE NOT ($element$ = $select$)
  ) AS foo WHERE SEQNO < s.SEQNO) AS SEQNO
  FROM (
    SELECT $select$, SEQNO
    FROM $collection$
    WHERE NOT ($element$ = $select$)
  ) AS foo
>>

feature_call_union_sequence(collection1,collection2,select) ::= <<
($collection1$)
  UNION
  (SELECT $select$, (SELECT MAX(SEQNO) FROM ($collection$)) + SEQNO
   FROM $collection2$)
>>