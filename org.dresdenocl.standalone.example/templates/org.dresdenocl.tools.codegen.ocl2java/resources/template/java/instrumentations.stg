group javaInstrumentations;
delimiters "$","$"

// ---- TEMPLATES FOR JAVA INSTRUMENTATION ----
// --------------------------------------------


// --- Code skeleton for an Aspect file ---
aspectFile(package, name, advice, allInstanceClasses, isNewClasses) ::= <<
package $package$;

/**
 * <p>Generated Aspect to enforce OCL constraint.</p>
 *
 * @author OCL22Java of Dresden OCL2 for Eclipse
 * @Generated
 */
public privileged aspect $name$ {

$if(allInstanceClasses)$
    protected static java.util.Map<String, java.util.Map> allInstances = new java.util.HashMap<String, java.util.Map>();

    $allInstanceClasses:allInstancesAdvice(); separator = "\n\n"$
$endif$

$if(isNewClasses)$
    protected java.util.Map<Object, Object> newInstances = new java.util.WeakHashMap<Object, Object>();

    $isNewClasses:newInstancesAdvice(); separator = "\n\n"$
$endif$

    $advice; separator="\n\n"$
}
>>


// ---- GENERAL POINTCUTS AND ADVICES ----
// ---------------------------------------

// --- Advice to provide the special OCL operation allInstances. ---
allInstancesAdvice(name) ::= <<
/**
 * <p>Adds all instances of the class {@link $name$} to the {@link java.util.Map} allInstances.</p>
 */
after($name$ $selfVariable()$) : execution($name$.new(..)) && this($selfVariable()$) {

    java.util.Map<$name$, Object> instanceMap;

    instanceMap = (java.util.Map<$name$, Object>) allInstances.get($selfVariable()$.getClass().getCanonicalName());

    if (instanceMap == null) {
        instanceMap = new java.util.WeakHashMap<$name$, Object>();
    }
    // no else.

    instanceMap.put($selfVariable()$, null);

    allInstances.put($selfVariable()$.getClass().getCanonicalName(), instanceMap);
}
>>


// --- Pointcut to describe all Constructors of a Class ---
allConstructorsPointcut(class, package) ::= <<
/**
 * <p>Describes all Constructors of the class {@link $package$.$class$}.</p>
 */
protected pointcut all$class$Constructors($package$.$class$ $selfVariable()$):
    execution($package$.$class$.new(..)) && this($selfVariable()$);
>>


// --- Pointcut to describe all public methods of a Class ---
allPublicMethodsPointcut(class, package) ::= <<
/**
 * <p>Describes all public methods of the class {@link $package$.$class$}.</p>
 */
protected pointcut all$class$PublicMethods($package$.$class$ $selfVariable()$):
    execution(public * $package$.$class$.*(..)) && this($selfVariable()$);
>>


// --- Pointcut to collect all Setters for a list of Attributes  ---
allSettersPointcut(class, package, attributes) ::= <<
/**
 * <p>Pointcut to collect all attributeSetters.</p>
 */
protected pointcut allSetters($package$.$class$ $selfVariable()$) :
	$attributes:allSetterPointcut_attributeSetter(); separator="\n|| "$;
>>


allSetterPointcut_attributeSetter(attribute) ::= <<
$attribute$Setter($selfVariable()$)
>>


// --- Pointcut to describe a setter for an Attribute ---
attributeSetterPointcut(class, package, atName, atPath) ::= <<
/**
 * <p>Pointcut for all changes of the attribute {@link $package$.$class$#$atPath$}.</p>
 */
protected pointcut $atName$Setter($package$.$class$ $selfVariable()$) :
    set(* $package$.$class$.$atPath$) && target($selfVariable()$);
>>


// --- Advice to declare a new super Class. ---
declareSuperClassAdvice(class, package, superClass, constFolder) ::= <<
/* Declares a new super class containing the new attribute or method. */
declare parents : $package$.$class$ extends $package$$if(constFolder)$.$constFolder$$endif$.$superClass$;
>>


// --- Advice to declare a Method which makes deep copies of a class. ---
deepCopyMethod(class) ::= <<
/**
 * A method to make copies of {@link $class$}.
 *
 * @param anObject The {@link Object} which shall be copied.
 * @return The copy of the given {@link Object}.
 */
protected $class$ $deepCopyOperationName()$($class$ anObject) {

    $class$ result;

    /*
     * TODO: Auto-generated code to copy values of the class $class$.
     * Change this statement to create a new instance of $class$
     * and eventually set some attributes as well.
     */
    result = anObject;

    return result;
}
>>


// --- Pointcut to describe a getter for an Attribute ---
getterPointcut(class, package, atName, atType) ::= <<
/**
 * <p>Pointcut for all requests on {@link $package$.$class$#$atName$}.</p>
 */
protected pointcut $atName$Getter($package$.$class$ $selfVariable()$) :
	get(* $atName$) && target($selfVariable()$);
>>


// --- Pointcut to describe all calls of a Method ---
methodCallPointcut(class, package, method, args, argTypes, returnType) ::= <<
/**
 * <p>Pointcut for all calls on {@link $package$.$class$#$method$($if(args)$$args, argTypes:{arg, type | $type$ $arg$}; separator = ", "$$endif$)}.</p>
 */
protected pointcut $method$Caller($package$.$class$ $selfVariable()$$if(args)$$args, argTypes:{arg, type | , $type$ $arg$}$$endif$):
	call(* $package$.$class$.$method$($argTypes:{type | $type$}; separator=", "$))
	&& target($selfVariable()$)$if(args)$ && args($args:{arg | $arg$}; separator=", "$)$endif$;
>>


// --- Advice to provide the special OCL operation oclIsNew. ---
newInstancesAdvice(name) ::= <<
/**
 * <p>Adds all new instances of the class {@link $name$} to the {@link java.util.Map}
 * newInstances which were created after the beginning of a constraint instrumentation
 * method which calls the OCL operation oclIsNew().</p>
 */
after($name$ $selfVariable()$) : execution($name$.new(..)) && this($selfVariable()$) {
    this.newInstances.put($selfVariable()$, null);
}
>>


// --- Pointcut to describe a setter for an Attribute ---
setterPointcut(class, package, atName, atType) ::= <<
/**
 * <p>Pointcut for all changes of the attribute $atName$ of the class {@link $package$.$class$}.</p>
 */
protected pointcut $atName$Setter($package$.$class$ $selfVariable()$) :
    set(* $package$.$class$.$atName$) && this($selfVariable()$);
>>


// --- Pointcut to describe a getter for a static Attribute ---
staticGetterPointcut(class, package, atName, atType) ::= <<
/**
 * <p>Pointcut for all requests on {@link $package$.$class$#$atName$}.</p>
 */
protected pointcut $atName$Getter() :
	get(static * $package$.$class$.$atName$);
>>


// --- Pointcut to describe all calls of a static Method ---
staticMethodCallPointcut(class, package, method, args, argTypes, returnType, opIsConstructor=false) ::= <<
/**
 * <p>Pointcut for all calls on {@link $package$.$class$#$method$($if(args)$$args, argTypes:{arg, type | $type$ $arg$}; separator = ", "$$endif$)}.</p>
 */
protected pointcut $method$Caller($if(args)$$args, argTypes:{arg, type | $type$ $arg$};separator=", "$$endif$):
	execution($if(opIsConstructor)$$else$* $endif$$package$.$class$.$if(opIsConstructor)$new$else$$method$$endif$($argTypes:{type | $type$}; separator=", "$))$if(args)$ && args($args:{arg | $arg$}; separator=", "$)$endif$;
>>


// ---- INSTRUMENTATION SKELETONS ----
// -----------------------------------

// --- Instrumentation Code for Body Constraints ---
bodyInstrumentation(class, package, constCode, constExp, oclBody, method, args, argTypes, returnType, opIsStatic) ::= <<
$if(opIsStatic)$
$staticMethodCallPointcut(class = class, package = package, method = method, args = args, argTypes = argTypes, returnType = returnType)$

$else$
$methodCallPointcut(class = class, package = package, method = method, args = args, argTypes = argTypes, returnType = returnType)$

$endif$
/**
 * <p>Defines the body of the method $method$($if(args)$$args, argTypes:{arg, type | $type$ $arg$}; separator = ", "$$endif$) defined by the constraint
 * <code>context $class$::$method$($if(args)$$args, argTypes:{arg, type | $arg$: $type$}; separator = ", "$$endif$)$if(returnType)$: $returnType$$endif$
 *       $oclBody$</code></p>
 */
$if(returnType)$$returnType$$else$void$endif$ around($if(opIsStatic)$$else$$package$.$class$ $selfVariable()$$if(args)$, $endif$$endif$$if(args)$$args, argTypes:{arg, type | $type$ $arg$};separator=", "$$endif$): $method$Caller($if(opIsStatic)$$else$$selfVariable()$$if(args)$, $endif$$endif$$args:{arg | $arg$};separator=", "$) {
    $constCode$
    $if(returnType)$
    return $constExp$;
    $else$
    $constExp$;
    $endif$
}
>>


// --- Instrumentation Code for Definition Constraints ---
// -- Definition of new attributes --
defAttributeInstrumentation(class, package, superClass, constFolder, constCode, constExp, oclBody, attribute, attributeType, isStatic, getterName) ::= <<
/**
 * <p>Defines the field $attribute$ defined by the constraint
 * <code>context $class$
 *       $oclBody$</code></p>
 */
public $if(isStatic)$static $endif$$attributeType$ $package$.$class$.$attribute$;

$if(getterName)$
/**
 * <p>Getter method for the attribute $attribute$.</p>
 */
public $if(isStatic)$static $endif$$attributeType$ $package$.$class$.$getterName$() {
$if(isStatic)$
    return $package$.$class$.$attribute$;
$else$
    return this.$attribute$;    
$endif$

}$endif$
$if(isStatic)$
$staticGetterPointcut(class = class, package = package, atName = attribute, atType = attributeType)$

/**
 * <p>Initializes the attribute $attribute$ defined by the constraint
 * <code>context $class$
 *       $oclBody$</code></p>
 */
before(): $attribute$Getter() {
    $constCode$
    $package$.$class$.$attribute$ = $constExp$;
}$else$
$getterPointcut(class = class, package = package, atName = attribute, atType = attributeType)$

/**
 * <p>Initializes the attribute $attribute$ defined by the constraint
 * <code>context $class$
 *       $oclBody$</code></p>
 */
before($package$.$class$ $selfVariable()$): $attribute$Getter($selfVariable()$) {
    $constCode$
    $selfVariable()$.$attribute$ = $constExp$;
}$endif$
>>


// -- Definition of new methods --
defMethodInstrumentation(class, package, constFolder, constCode, constExp, oclBody, method, args, argTypes, returnType, isStatic, usesSelfVariable) ::= <<
/**
 * <p>Defines the method $method$($if(args)$$args, argTypes:{arg, type | $type$ $arg$}; separator= ", "$$endif$) defined by the constraint
 * <code>context $class$
 *       $oclBody$</code></p>
 */
public $if(isStatic)$static $endif$$if(returnType)$$returnType$$else$void$endif$ $package$.$class$.$method$($args, argTypes:{arg, type | $type$ $arg$}; separator = ", "$) {
	$if(usesSelfVariable)$
	/* Self variable probably used within the definition. */
	$package$.$class$ $selfVariable()$ = this;
	
	$endif$
    $constCode$
    $if(returnType)$
    return $constExp$;
    $else$
    $constExp$;
    $endif$
}
>>


// --- Instrumentation Code for Derive Constraints ---
deriveInstrumentation(class, package, superClass, constCode, constExp, oclBody, attribute, attributeType, attIsStatic) ::= <<
$if(attIsStatic)$
$staticGetterPointcut(class = class, package = package, atName = attribute, atType = attributeType)$

$else$
$getterPointcut(class = class, package = package, atName = attribute, atType = attributeType)$

$endif$
/**
 * <p>Derives the attribute $attribute$ defined by the constraint
 * <code>context $class$
 *       $oclBody$</code></p>
 */
before($if(attIsStatic)$$else$$package$.$class$ $selfVariable()$$endif$): $attribute$Getter($if(attIsStatic)$$else$$selfVariable()$$endif$) {
    $constCode$
    $if(attIsStatic)$
    $package$.$class$.$attribute$ = $constExp$;
    $else$
    $selfVariable()$.$attribute$ = $constExp$;
    $endif$
}
>>


// --- Instrumentation Code for Initial Constraints ---
initInstrumentation(class, package, attribute, constCode, constExp, oclBody) ::= <<
$allConstructorsPointcut(class = class, package = package)$

/**
 * <p><code>Initializes the attribute $attribute$ defined by the constraint
 * <code>context $class$::$attribute$
 *       $oclBody$</code></p>
 */
after($package$.$class$ $selfVariable()$) : all$class$Constructors($selfVariable()$) {
    $constCode$
    $selfVariable()$.$attribute$ = $constExp$;
}
>>

// --- Instrumentation Code for Invariants with validation variant 1 ---
invInstrumentation1(class, package, attribute, attributeType, constCode, constExp, oclBody, errorCode, disableInheritance, calledAttPaths, calledAttNames) ::= <<
$allConstructorsPointcut(class = class, package = package)$

$if(calledAttPaths)$
$calledAttPaths, calledAttNames:{path, name | $attributeSetterPointcut(class = class, package = package, atName = name, atPath = path)$ }; separator="\n\n"$

$allSettersPointcut(class = class, package = package, attributes = calledAttNames)$

$endif$
/**
 * <p><code>Checks an invariant on the class $class$ defined by the constraint
 * <code>context $class$
 *       $oclBody$</code></p>
 */
after($package$.$class$ $selfVariable()$) : all$class$Constructors($selfVariable()$) $if(calledAttPaths)$|| allSetters($selfVariable()$) $endif${
    $if(disableInheritance)$
    /* Disable this constraint for subclasses of $class$. */
    if ($selfVariable()$.getClass().getCanonicalName().equals("$package$.$class$")) {
    $endif$
    $constCode$
    if (!$constExp$) {
    	$errorCode$
    }
    // no else.
    $if(disableInheritance)$
    }
    // no else.
    $endif$
}
>>


// --- Instrumentation Code for Invariants with validation variant 2 ---
invInstrumentation2(class, package, attribute, attributeType, constCode, constExp, oclBody, errorCode, disableInheritance) ::= <<
$allConstructorsPointcut(class = class, package = package)$

$allPublicMethodsPointcut(class = class, package = package)$

/**
 * <p><code>Checks an invariant on the class $class$ defined by the constraint
 * <code>context $class$
 *       $oclBody$</code>
 * before execution of public methods.</p>
 */
before($package$.$class$ $selfVariable()$) : all$class$PublicMethods($selfVariable()$) {
    $if(disableInheritance)$
    /* Disable this constraint for subclasses of $class$. */
    if ($selfVariable()$.getClass().getCanonicalName().equals("$package$.$class$")) {
    $endif$
    $constCode$
    if (!$constExp$) {
    	$errorCode$
    }
    // no else.
    $if(disableInheritance)$
    }
    // no else.
    $endif$
}

/**
 * <p><code>Checks an invariant on the class $class$ defined by the constraint
 * <code>context $class$
 *       $oclBody$</code>
 * after execution of public methods and constructors.</p>
 */
after($package$.$class$ $selfVariable()$) : all$class$Constructors($selfVariable()$) || all$class$PublicMethods($selfVariable()$) {
    $if(disableInheritance)$
    /* Disable this constraint for subclasses of $class$. */
    if ($selfVariable()$.getClass().getCanonicalName().equals("$package$.$class$")) {
    $endif$
    $constCode$
    if (!$constExp$) {
    	$errorCode$
    }
    // no else.
    $if(disableInheritance)$
    }
    // no else.
    $endif$
}

/**
 * <p><code>Checks an invariant on the class $class$ defined by the constraint
 * <code>context $class$
 *       $oclBody$</code>
 * after execution of public methods throwing any Exception.</p>
 */
after($package$.$class$ $selfVariable()$) throwing : all$class$PublicMethods($selfVariable()$) {
    $if(disableInheritance)$
    /* Disable this constraint for subclasses of $class$. */
    if ($selfVariable()$.getClass().getCanonicalName().equals("$package$.$class$")) {
    $endif$
    $constCode$
    if (!$constExp$) {
    	$errorCode$
    }
    // no else.
    $if(disableInheritance)$
    }
    // no else.
    $endif$
}
>>


// --- Instrumentation Code for Invariants with validation variant 3 ---
invInstrumentation3(class, package, attribute, attributeType, constCode, constExp, oclBody, errorCode, disableInheritance, defineCheckMethod) ::= <<
$if(defineCheckMethod)$
declare parents: $package$.$class$ implements org.dresdenocl.tools.codegen.ocl2java.types.OclCheckable;

public void $package$.$class$.$checkInvariantsOperationName()$() {
    /* Remains empty. Is only filled with behavior by advice(s). */
}

$endif$
$invInstrumentation3_methodCallPointcut(class = class, package = package)$

/**
 * <p><code>Checks an invariant on the class $class$ defined by the constraint
 * <code>context $class$
 *       $oclBody$</code></p>
 */
after($package$.$class$ $selfVariable()$) : $checkInvariantsOperationName()$Caller($selfVariable()$) {
    $if(disableInheritance)$
    /* Disable this constraint for subclasses of $class$. */
    if ($selfVariable()$.getClass().getCanonicalName().equals("$package$.$class$")) {
    $endif$
    $constCode$
    if (!$constExp$) {
    	$errorCode$
    }
    // no else.
    $if(disableInheritance)$
    }
    // no else.
    $endif$
}
>>


// --- Pointcut to describe all calls of a Method ---
invInstrumentation3_methodCallPointcut(class, package) ::= <<
/**
 * <p>Pointcut for all calls on {@link $package$.$class$#$checkInvariantsOperationName()$()}.</p>
 */
protected pointcut $checkInvariantsOperationName()$Caller($package$.$class$ $selfVariable()$):
	call(void $checkInvariantsOperationName()$())
	&& target($selfVariable()$);
>>


// --- Instrumentation Code for Preconditions ---
preInstrumentation(class, package, constCode, constExp, oclBody, method, args, argTypes, returnType, errorCode, disableInheritance, opIsStatic, opIsConstructor) ::= <<
$if(opIsStatic)$
$staticMethodCallPointcut(class = class, package = package, method = method, args = args, argTypes = argTypes, returnType = returnType, opIsConstructor = opIsConstructor)$

$else$
$methodCallPointcut(class = class, package = package, method = method, args = args, argTypes = argTypes, returnType = returnType)$

$endif$
/**
 * <p>Checks a precondition for the {@link $class$#$method$($if(args)$$args, argTypes:{arg, type | , $type$ $arg$}$$endif$)} defined by the constraint
 * <code>context $class$::$method$($if(args)$$args, argTypes:{arg, type | $arg$: $type$}; separator = ", "$$endif$) : $returnType$
 *       $oclBody$</code></p>
 */
before($if(opIsStatic)$$else$$package$.$class$ $selfVariable()$$if(args)$, $endif$$endif$$if(args)$$args, argTypes:{arg, type | $type$ $arg$};separator=", "$$endif$): $method$Caller($if(opIsStatic)$$else$$selfVariable()$$if(args)$, $endif$$endif$$args:{arg | $arg$};separator=", "$) {
    $if(disableInheritance)$
    $if(opIsStatic)$
    $else$
    /* Disable this constraint for subclasses of $class$. */
    if ($selfVariable()$.getClass().getCanonicalName().equals("$package$.$class$")) {
    $endif$
    $endif$
    $constCode$
    if (!$constExp$) {
    	$errorCode$
    }
    // no else.
    $if(opIsStatic)$
    $else$
    $if(disableInheritance)$
    }
    // no else.
    $else$
    $endif$
    $endif$
}
>>


// --- Instrumentation Code for Postconditions ---
postInstrumentation(class, package, constCode, constExp, oclBody, method, args, argTypes, returnType, errorCode, oclIsNewUsed, primitiveAtPreCodes, primitiveAtPreExps, primitiveAtPreTypes, primitiveAtPreVars, atPreCodes, atPreExps, atPreTypes, atPreVars, atPreTypeSet, disableInheritance, opIsStatic, opIsConstructor) ::= <<
$if(atPreTypeSet)$
$atPreTypeSet: { type | $deepCopyMethod(class = type)$ }; separator = "\n\n"$

$endif$
$if(opIsStatic)$
$staticMethodCallPointcut(class = class, package = package, method = method, args = args, argTypes = argTypes, returnType = returnType, opIsConstructor = opIsConstructor)$

$else$
$methodCallPointcut(class = class, package = package, method = method, args = args, argTypes = argTypes, returnType = returnType)$

$endif$
/**
 * <p>Checks a postcondition for the operation {@link $class$#$method$($if(args)$$args, argTypes:{arg, type | , $type$ $arg$}$$endif$)} defined by the constraint
 * <code>context $class$::$method$($if(args)$$args, argTypes:{arg, type | $arg$: $type$}; separator = ", "$$endif$) : $returnType$
 *       $oclBody$</code></p>
 */
$if(returnType)$$returnType$$else$void$endif$ around($if(opIsStatic)$$else$$package$.$class$ $selfVariable()$$if(args)$, $endif$$endif$$if(args)$$args, argTypes:{arg, type | $type$ $arg$};separator=", "$$endif$): $method$Caller($if(opIsStatic)$$else$$selfVariable()$$if(args)$, $endif$$endif$$args:{arg | $arg$};separator=", "$) {
    $if(disableInheritance)$
    $if(opIsStatic)$
    $else$
    /* Disable this constraint for subclasses of $class$. */
    if ($selfVariable()$.getClass().getCanonicalName().equals("$package$.$class$")) {
    $endif$
    $endif$
    $if(atPreVars)$

    $atPreCodes, atPreExps, atPreTypes, atPreVars: { code, exp, type, var | $atPreVarInit(code = code, exp = exp, type = type, var = var)$}; separator = "\n\n"$
    $endif$
    $if(primitiveAtPreVars)$

    $primitiveAtPreCodes, primitiveAtPreExps, primitiveAtPreTypes, primitiveAtPreVars: { code, exp, type, var | $primitiveAtPreVarInit(code = code, exp = exp, type = type, var = var)$}; separator = "\n\n"$
    $endif$
    $if(oclIsNewUsed)$

    // Reset Map which collects new instances.
    this.newInstances.clear();$endif$


    $if(returnType)$
    $returnType$ $resultVariable()$;
    $resultVariable()$ = proceed($if(opIsStatic)$$else$$selfVariable()$$if(args)$, $endif$$endif$$args:{arg | $arg$};separator=", "$);
    $else$
    proceed($if(opIsStatic)$$else$$selfVariable()$$if(args)$, $endif$$endif$$args:{arg | $arg$};separator=", "$);$endif$


    $constCode$
    if (!$constExp$) {
    	$errorCode$
    }
    // no else.
    $if(returnType)$

    return $resultVariable()$;
    $endif$
    $if(opIsStatic)$
    $else$
    $if(disableInheritance)$
    }
    $if(returnType)$

    else {
        return proceed($if(opIsStatic)$$else$$selfVariable()$$if(args)$, $endif$$endif$$args:{arg | $arg$};separator=", "$);
    }
    $else$
    // no else.
    $endif$
    $endif$
    $endif$
}
>>


// -- Initialization of Variables for atPre values in Postconditions --
atPreVarInit(code, exp, type, var) ::= <<
$type$ $var$;

if ($exp$ == null) {
    $var$ == null;
} else {
$code$$var$ = this.$deepCopyOperationName()$($exp$);
}
>>


// -- Initialization of Variables for primitive atPre values in Postconditions --
primitiveAtPreVarInit(code, exp, type, var) ::= <<
$type$ $var$;

if (($anyType()$) $exp$ == null) {
    $var$ = null;
} else {
    $code$$var$ = new $type$($exp$);
}
>>


// --- Instrumentation Code for Initial Constraints ---
staticInitInstrumentation(class, package, attribute, constCode, constExp, oclBody) ::= <<
/**
 * <p>The initialization of the class {@link $package$.$class$}.</p>
 */
protected pointcut static$class$Init():
    staticinitialization($package$.$class$);

/**
 * <p><code>Initializes the static attribute $attribute$ defined by the constraint
 * <code>context $class$::$attribute$
 *       $oclBody$</code></p>
 */
after(): static$class$Init() {
    $constCode$
    $package$.$class$.$attribute$ = $constExp$;
}
>>